# Copyright 2025 iLogtail Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Create Release Branch

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 3.1.4)'
        required: true
        type: string
        pattern: '^[0-9]+\.[0-9]+\.[0-9]+.*$'
      milestone_id:
        description: 'Milestone ID from GitHub (e.g., 26 for https://github.com/alibaba/ilogtail/milestone/26)'
        required: true
        type: string
        pattern: '^[0-9]+$'

env:
  GO_VERSION: 1.19.10

jobs:
  create-release-branch:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      pull-requests: write
    outputs:
      branch_name: ${{ steps.create-branch.outputs.branch_name }}
      version: ${{ github.event.inputs.version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set custom submodule URL and fetch
        run: |
          SUBMODULE_PATH="core/_thirdparty/coolbpf"
          git config submodule.$SUBMODULE_PATH.url "https://github.com/aliyun/coolbpf.git"
          git submodule update --init
          cd $SUBMODULE_PATH
          echo "Current commit: $(git rev-parse HEAD)"

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create release branch
        id: create-branch
        run: |
          VERSION="${{ github.event.inputs.version }}"
          MILESTONE_ID="${{ github.event.inputs.milestone_id }}"
          # 提取大版本号，如3.1.4 -> 3.1
          MAJOR_VERSION=$(echo $VERSION | cut -d. -f1,2)
          MAJOR_BRANCH_NAME="${MAJOR_VERSION}"
          
          # 确保我们在main分支上
          git checkout main
          git pull origin main
          
          # 检查大版本分支是否存在，如果不存在则从main创建
          if ! git show-ref --verify --quiet refs/remotes/origin/$MAJOR_BRANCH_NAME; then
            echo "Major version branch $MAJOR_BRANCH_NAME does not exist, creating from main..."
            git checkout -b "$MAJOR_BRANCH_NAME"
            git push origin "$MAJOR_BRANCH_NAME"
          else
            echo "Major version branch $MAJOR_BRANCH_NAME exists, switching to it..."
            git checkout "$MAJOR_BRANCH_NAME"
            git pull origin "$MAJOR_BRANCH_NAME"
            # 同步main分支的最新内容
            git merge main --no-ff -m "Sync main branch for release v$VERSION"
          fi
          
          # 更新版本号
          echo "Updating version to $VERSION"
          sed -i "s/VERSION ?= .*/VERSION ?= $VERSION/" Makefile
          
          # 生成changelog
          echo "Generating changelog for version $VERSION with milestone ID $MILESTONE_ID"
          
          chmod +x scripts/gen_release_markdown.sh
          ./scripts/gen_release_markdown.sh $VERSION $MILESTONE_ID
          
          # 提交更改
          git add -A
          git commit -m "chore: prepare release v$VERSION"
          
          # 推送分支
          git push origin "$MAJOR_BRANCH_NAME"
          
          echo "branch_name=$MAJOR_BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Output branch name
        run: |
          VERSION="${{ github.event.inputs.version }}"
          MAJOR_VERSION=$(echo $VERSION | cut -d. -f1,2)
          MAJOR_BRANCH_NAME="v${MAJOR_VERSION}"
          echo "Release prepared on branch: $MAJOR_BRANCH_NAME"
          echo "Please trigger the publish-release workflow with branch name: $MAJOR_BRANCH_NAME and version: $VERSION"

  # 第一步：构建不同架构的安装包
  build-linux-amd64:
    needs: create-release-branch
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.create-release-branch.outputs.branch_name }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set custom submodule URL and fetch
        run: |
          SUBMODULE_PATH="core/_thirdparty/coolbpf"
          git config submodule.$SUBMODULE_PATH.url "https://github.com/aliyun/coolbpf.git"
          git submodule update --init
          cd $SUBMODULE_PATH
          echo "Current commit: $(git rev-parse HEAD)"

      - name: Build Linux AMD64 package
        run: |
          VERSION="${{ github.event.inputs.version }}"
          make dist
          ls -la dist/

      - name: Upload Linux AMD64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-amd64-package
          path: dist/
          retention-days: 1

  build-linux-arm64:
    needs: create-release-branch
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.create-release-branch.outputs.branch_name }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set custom submodule URL and fetch
        run: |
          SUBMODULE_PATH="core/_thirdparty/coolbpf"
          git config submodule.$SUBMODULE_PATH.url "https://github.com/aliyun/coolbpf.git"
          git submodule update --init
          cd $SUBMODULE_PATH
          echo "Current commit: $(git rev-parse HEAD)"

      - name: Build Linux ARM64 package
        run: |
          VERSION="${{ github.event.inputs.version }}"
          # 使用 Docker 在 ARM64 环境下构建
          docker run --rm --platform linux/arm64 -v $(pwd):/workspace -w /workspace golang:1.19.10-bullseye bash -c "
            apt-get update && apt-get install -y make gcc g++ git
            cd /workspace
            SUBMODULE_PATH='core/_thirdparty/coolbpf'
            git config submodule.\$SUBMODULE_PATH.url 'https://github.com/aliyun/coolbpf.git'
            git submodule update --init
            make dist
          "
          ls -la dist/

      - name: Upload Linux ARM64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-package
          path: dist/
          retention-days: 1

  build-windows:
    needs: create-release-branch
    runs-on: windows-latest
    timeout-minutes: 60
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.create-release-branch.outputs.branch_name }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set custom submodule URL and fetch
        run: |
          SUBMODULE_PATH="core/_thirdparty/coolbpf"
          git config submodule.$SUBMODULE_PATH.url "https://github.com/aliyun/coolbpf.git"
          git submodule update --init
          cd $SUBMODULE_PATH
          echo "Current commit: $(git rev-parse HEAD)"

      - name: Build Windows package
        run: |
          VERSION="${{ github.event.inputs.version }}"
          make dist
          ls -la dist/

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-package
          path: dist/
          retention-days: 1

      - name: Upload to OSS
        env:
          OSS_ACCESS_KEY_ID: ${{ secrets.OSS_ACCESS_KEY_ID }}
          OSS_ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
        run: |
          VERSION="${{ github.event.inputs.version }}"
          # 这里需要配置 OSS 上传逻辑
          # 使用 oss-browser 或其他工具上传 Windows 包
          echo "Uploading Windows package to OSS for version $VERSION"
          # TODO: 实现具体的 OSS 上传逻辑

  # 第二步：合并包并上传
  upload-packages:
    needs: [build-linux-amd64, build-linux-arm64, build-windows]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      OSS_ACCESS_KEY_ID: ${{ secrets.OSS_ACCESS_KEY_ID }}
      OSS_ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.create-release-branch.outputs.branch_name }}

      - name: Download Linux AMD64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-amd64-package
          path: temp-amd64/

      - name: Download Linux ARM64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-arm64-package
          path: temp-arm64/

      - name: Merge artifacts
        run: |
          mkdir -p dist/
          cp temp-amd64/* dist/ || true
          cp temp-arm64/* dist/ || true
          ls -la dist/

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Upload packages to OSS
        run: |
          VERSION="${{ github.event.inputs.version }}"
          chmod +x scripts/upload_release_assets.sh
          ./scripts/upload_release_assets.sh package $VERSION
          ./scripts/upload_release_assets.sh image $VERSION

  # 第三步：测试链接和产物
  test-release:
    needs: upload-packages
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.create-release-branch.outputs.branch_name }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Generate release markdown
        run: |
          VERSION="${{ github.event.inputs.version }}"
          MILESTONE_ID="${{ github.event.inputs.milestone_id }}"
          chmod +x scripts/gen_release_markdown.sh
          ./scripts/gen_release_markdown.sh $VERSION $MILESTONE_ID

      - name: Test release links
        run: |
          VERSION="${{ github.event.inputs.version }}"
          DOC_FILE="changes/v${VERSION}.md"
          
          if [ ! -f "$DOC_FILE" ]; then
            echo "Error: Release document $DOC_FILE not found"
            exit 1
          fi
          
          echo "Testing links in $DOC_FILE..."
          
          # 等待一段时间让 OSS 上传完成
          echo "Waiting for OSS upload to complete..."
          sleep 30
          
          # 提取所有链接并测试
          grep -o 'https://[^)]*' "$DOC_FILE" | while read -r url; do
            echo "Testing URL: $url"
            if curl -f -s -o /dev/null "$url"; then
              echo "✓ URL accessible: $url"
            else
              echo "✗ URL failed: $url"
              exit 1
            fi
          done
          
          # 测试下载链接
          LINUX_AMD64_URL="https://loongcollector-community-edition.oss-cn-shanghai.aliyuncs.com/${VERSION}/loongcollector-${VERSION}.linux-amd64.tar.gz"
          LINUX_ARM64_URL="https://loongcollector-community-edition.oss-cn-shanghai.aliyuncs.com/${VERSION}/loongcollector-${VERSION}.linux-arm64.tar.gz"
          WINDOWS_URL="https://loongcollector-community-edition.oss-cn-shanghai.aliyuncs.com/${VERSION}/loongcollector-${VERSION}.windows-amd64.zip"
          
          echo "Testing download URLs..."
          for url in "$LINUX_AMD64_URL" "$LINUX_ARM64_URL" "$WINDOWS_URL"; do
            echo "Testing download URL: $url"
            if curl -f -s -I "$url" | grep -q "200 OK"; then
              echo "✓ Download URL accessible: $url"
            else
              echo "✗ Download URL failed: $url"
              exit 1
            fi
          done
          
          echo "All tests passed!" 