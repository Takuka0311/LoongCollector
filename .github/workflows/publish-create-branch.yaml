# Copyright 2025 iLogtail Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Create Release Branch

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.2.3)'
        required: true
        type: string
        pattern: '^[0-9]+\.[0-9]+\.[0-9]+.*$'
      milestone_id:
        description: 'Milestone ID from GitHub (e.g., 26 for https://github.com/${GITHUB_REPOSITORY}/milestone/26)'
        required: true
        type: string
        pattern: '^[0-9]+$'

env:
  GO_VERSION: 1.19.10

jobs:
  create-release-branch:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set custom submodule URL and fetch
        run: |
          SUBMODULE_PATH="core/_thirdparty/coolbpf"
          git config submodule.$SUBMODULE_PATH.url "https://github.com/aliyun/coolbpf.git"
          git submodule update --init
          cd $SUBMODULE_PATH
          echo "Current commit: $(git rev-parse HEAD)"

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create release branch
        run: |
          VERSION="${{ github.event.inputs.version }}"
          MILESTONE_ID="${{ github.event.inputs.milestone_id }}"
          # 提取大版本号，如3.1.4 -> 3.1
          MAJOR_VERSION=$(echo $VERSION | cut -d. -f1,2)
          MAJOR_BRANCH_NAME="v${MAJOR_VERSION}"
          
          # 确保我们在main分支上
          git checkout main
          git pull origin main
          
          # 检查大版本分支是否存在，如果不存在则从main创建
          if ! git show-ref --verify --quiet refs/remotes/origin/$MAJOR_BRANCH_NAME; then
            echo "Major version branch $MAJOR_BRANCH_NAME does not exist, creating from main..."
            git checkout -b "$MAJOR_BRANCH_NAME"
            git push origin "$MAJOR_BRANCH_NAME"
          else
            echo "Major version branch $MAJOR_BRANCH_NAME exists, switching to it..."
            git checkout "$MAJOR_BRANCH_NAME"
            git pull origin "$MAJOR_BRANCH_NAME"
            # 同步main分支的最新内容
            git merge main --no-ff -m "Sync main branch for release v$VERSION"
          fi
          
          # 更新版本号
          echo "Updating version to $VERSION"
          sed -i "s/VERSION ?= .*/VERSION ?= $VERSION/" Makefile
          
          # 生成changelog
          echo "Generating changelog for version $VERSION with milestone ID $MILESTONE_ID"
          
          chmod +x scripts/gen_release_markdown.sh
          ./scripts/gen_release_markdown.sh $VERSION $MILESTONE_ID
          
          # 提交更改
          git add -A
          git commit -m "chore: prepare release v$VERSION"
          
          # 推送分支
          git push origin "$MAJOR_BRANCH_NAME"

      - name: Output branch name
        run: |
          VERSION="${{ github.event.inputs.version }}"
          MAJOR_VERSION=$(echo $VERSION | cut -d. -f1,2)
          MAJOR_BRANCH_NAME="v${MAJOR_VERSION}"
          echo "Release prepared on branch: $MAJOR_BRANCH_NAME"
          echo "Please trigger the publish-release workflow with branch name: $MAJOR_BRANCH_NAME and version: $VERSION" 