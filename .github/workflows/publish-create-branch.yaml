# Copyright 2025 iLogtail Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Create Release Branch

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 3.1.4)'
        required: true
        type: string
        pattern: '^[0-9]+\.[0-9]+\.[0-9]+.*$'
      milestone_id:
        description: 'Milestone ID from GitHub (e.g., 26 for https://github.com/alibaba/ilogtail/milestone/26)'
        required: true
        type: string
        pattern: '^[0-9]+$'
      build_linux_amd64:
        description: 'Build Linux AMD64 package'
        required: false
        type: boolean
        default: true
      build_linux_arm64:
        description: 'Build Linux ARM64 package'
        required: false
        type: boolean
        default: true
      build_windows:
        description: 'Build Windows package'
        required: false
        type: boolean
        default: true

env:
  GO_VERSION: 1.19.10

jobs:
  create-release-branch:
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    permissions:
      contents: write
      pull-requests: write
    outputs:
      branch_name: ${{ steps.create-branch.outputs.branch_name }}
      version: ${{ github.event.inputs.version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set custom submodule URL and fetch
        run: |
          SUBMODULE_PATH="core/_thirdparty/coolbpf"
          git config submodule.$SUBMODULE_PATH.url "https://github.com/aliyun/coolbpf.git"
          git submodule update --init
          cd $SUBMODULE_PATH
          echo "Current commit: $(git rev-parse HEAD)"

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create release branch
        id: create-branch
        run: |
          VERSION="${{ github.event.inputs.version }}"
          MILESTONE_ID="${{ github.event.inputs.milestone_id }}"
          # 提取大版本号，如3.1.4 -> 3.1
          MAJOR_VERSION=$(echo $VERSION | cut -d. -f1,2)
          MAJOR_BRANCH_NAME="${MAJOR_VERSION}"
          
          # 确保我们在main分支上
          git checkout main
          git pull origin main
          
          # 检查大版本分支是否存在，如果不存在则从main创建
          if ! git show-ref --verify --quiet refs/remotes/origin/$MAJOR_BRANCH_NAME; then
            echo "Major version branch $MAJOR_BRANCH_NAME does not exist, creating from main..."
            git checkout -b "$MAJOR_BRANCH_NAME"
            git push origin "$MAJOR_BRANCH_NAME"
          else
            echo "Major version branch $MAJOR_BRANCH_NAME exists, switching to it..."
            git checkout "$MAJOR_BRANCH_NAME"
            git pull origin "$MAJOR_BRANCH_NAME"
            # 同步main分支的最新内容
            git merge main --no-ff -m "Sync main branch for release v$VERSION"
          fi
          
          # 更新版本号
          echo "Updating version to $VERSION"
          sed -i "s/VERSION ?= .*/VERSION ?= $VERSION/" Makefile
          
          # 生成changelog
          echo "Generating changelog for version $VERSION with milestone ID $MILESTONE_ID"
          
          chmod +x scripts/gen_release_markdown.sh
          ./scripts/gen_release_markdown.sh $VERSION $MILESTONE_ID
          
          # 提交更改
          git add -A
          git commit -m "chore: prepare release v$VERSION"
          
          # 推送分支
          git push origin "$MAJOR_BRANCH_NAME"
          
          echo "branch_name=$MAJOR_BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Output branch name
        run: |
          VERSION="${{ github.event.inputs.version }}"
          MAJOR_VERSION=$(echo $VERSION | cut -d. -f1,2)
          MAJOR_BRANCH_NAME="${MAJOR_VERSION}"
          echo "Release prepared on branch: $MAJOR_BRANCH_NAME"
          echo "Please trigger the publish-release workflow with branch name: $MAJOR_BRANCH_NAME and version: $VERSION"

  # 第一步：构建不同架构的安装包
  build-linux:
    needs: create-release-branch
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 60
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
            should_build: ${{ github.event.inputs.build_linux_amd64 == 'true' }}
          - arch: arm64
            runner: ubuntu-24.04-arm
            should_build: ${{ github.event.inputs.build_linux_arm64 == 'true' }}
    steps:
      - name: Check out code
        if: matrix.should_build
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.create-release-branch.outputs.branch_name }}

      - name: Set up Go
        if: matrix.should_build
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set custom submodule URL and fetch
        if: matrix.should_build
        run: |
          SUBMODULE_PATH="core/_thirdparty/coolbpf"
          git config submodule.$SUBMODULE_PATH.url "https://github.com/aliyun/coolbpf.git"
          git submodule update --init
          cd $SUBMODULE_PATH
          echo "Current commit: $(git rev-parse HEAD)"

      - name: Build Linux ${{ matrix.arch }} package
        if: matrix.should_build
        run: |
          VERSION="${{ github.event.inputs.version }}"
          make dist
          ls -la dist/

      - name: Upload Linux ${{ matrix.arch }} artifacts
        if: matrix.should_build
        uses: actions/upload-artifact@v4
        with:
          name: loongcollector-${{ github.event.inputs.version }}.linux-${{ matrix.arch }}.tar.gz
          path: dist/loongcollector-${{ github.event.inputs.version }}.linux-${{ matrix.arch }}.tar.gz
          retention-days: 1

  build-windows:
    needs: create-release-branch
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 60
    strategy:
      matrix:
        runner: [Windows]
    steps:
      - name: Check out code
        if: github.event.inputs.build_windows == 'true'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.create-release-branch.outputs.branch_name }}

      - name: Build Windows package
        if: github.event.inputs.build_windows == 'true'
        run: |
          Write-Host "Starting Windows build..."
          .\scripts\windows64_build.bat $env:LOONCOLLECTOR_VERSION
          
          # 检查构建结果
          if (Test-Path "output") {
            Write-Host "Build successful. Output files:"
            Get-ChildItem -Path "output" -Recurse
          } else {
            Write-Error "Build failed - output directory not found"
            exit 1
          }

      - name: Upload Windows artifacts
        if: github.event.inputs.build_windows == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: loongcollector-${{ github.event.inputs.version }}.windows-amd64.zip
          path: dist/loongcollector-${{ github.event.inputs.version }}.windows-amd64.zip
          retention-days: 1

  # 第二步：合并包并上传
  upload-packages:
    needs: [create-release-branch, build-linux, build-windows]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: |
      always() &&
      (needs.create-release-branch.result == 'success') &&
      (needs.build-linux.result == 'success' || needs.build-linux.result == 'skipped') &&
      (needs.build-windows.result == 'success' || needs.build-windows.result == 'skipped')
    env:
      OSS_ACCESS_KEY_ID: ${{ secrets.OSS_ACCESS_KEY_ID }}
      OSS_ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.create-release-branch.outputs.branch_name }}

      - name: Download Linux AMD64 artifacts
        if: github.event.inputs.build_linux_amd64 == 'true'
        uses: actions/download-artifact@v4
        with:
          name: loongcollector-${{ github.event.inputs.version }}.linux-amd64.tar.gz
          path: temp-amd64/

      - name: Download Linux ARM64 artifacts
        if: github.event.inputs.build_linux_arm64 == 'true'
        uses: actions/download-artifact@v4
        with:
          name: loongcollector-${{ github.event.inputs.version }}.linux-arm64.tar.gz
          path: temp-arm64/

      - name: Download Windows artifacts
        if: github.event.inputs.build_windows == 'true'
        uses: actions/download-artifact@v4
        with:
          name: loongcollector-${{ github.event.inputs.version }}.windows-amd64.zip
          path: temp-windows/

      - name: List downloaded artifacts
        run: |
          echo "Available artifacts:"
          ls -la temp-amd64/ temp-arm64/ temp-windows/ || true

      - name: Merge artifacts and generate SHA256
        run: |
          mkdir -p dist/
          cp temp-amd64/* dist/ || true
          cp temp-arm64/* dist/ || true
          cp temp-windows/* dist/ || true
          
          # Generate SHA256 files for OSS upload
          cd dist
          for file in *.tar.gz *.zip; do
            if [ -f "$file" ]; then
              sha256sum "$file" > "$file.sha256"
              echo "Generated SHA256 for $file"
            fi
          done
          ls -la dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: sls-opensource-registry.cn-shanghai.cr.aliyuncs.com
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload packages to OSS
        run: |
          VERSION="${{ github.event.inputs.version }}"
          chmod +x scripts/upload_release_assets.sh
          ./scripts/upload_release_assets.sh package $VERSION
          ./scripts/upload_release_assets.sh image $VERSION

      - name: Build and push Docker images to GitHub Container Registry
        run: |
          VERSION="${{ github.event.inputs.version }}"
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          
          # 构建并推送多架构镜像到 GitHub Container Registry
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag ghcr.io/$REPO_OWNER/loongcollector:$VERSION \
            --tag ghcr.io/$REPO_OWNER/loongcollector:latest \
            --file ./docker/Dockerfile_release \
            --push \
            --build-arg VERSION=$VERSION \
            .
          
          echo "Docker images pushed to GitHub Container Registry:"
          echo "- ghcr.io/$REPO_OWNER/loongcollector:$VERSION"
          echo "- ghcr.io/$REPO_OWNER/loongcollector:latest"

  # 第三步：测试链接和产物
  test-release:
    needs: [create-release-branch, upload-packages]
    if: |
      always() &&
      (needs.create-release-branch.result == 'success') &&
      (needs.upload-packages.result == 'success' || needs.upload-packages.result == 'skipped')
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.create-release-branch.outputs.branch_name }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Generate release markdown
        run: |
          VERSION="${{ github.event.inputs.version }}"
          MILESTONE_ID="${{ github.event.inputs.milestone_id }}"
          chmod +x scripts/gen_release_markdown.sh
          ./scripts/gen_release_markdown.sh $VERSION $MILESTONE_ID

      - name: Test release links
        run: |
          VERSION="${{ github.event.inputs.version }}"
          DOC_FILE="changes/v${VERSION}.md"
          
          if [ ! -f "$DOC_FILE" ]; then
            echo "Error: Release document $DOC_FILE not found"
            exit 1
          fi
          
          echo "Testing links in $DOC_FILE..."
          
          # 等待一段时间让 OSS 上传完成
          echo "Waiting for OSS upload to complete..."
          sleep 30
          
          # 提取所有链接并测试
          grep -o 'https://[^)]*' "$DOC_FILE" | while read -r url; do
            echo "Testing URL: $url"
            if curl -f -s -o /dev/null "$url"; then
              echo "✓ URL accessible: $url"
            else
              echo "✗ URL failed: $url"
              exit 1
            fi
          done
          
          # 测试下载链接
          echo "Testing download URLs..."
          
          # 测试 Linux AMD64
          if [[ "${{ github.event.inputs.build_linux_amd64 }}" == "true" ]]; then
            LINUX_AMD64_URL="https://loongcollector-community-edition.oss-cn-shanghai.aliyuncs.com/${VERSION}/loongcollector-${VERSION}.linux-amd64.tar.gz"
            echo "Testing Linux AMD64 download URL: $LINUX_AMD64_URL"
            if curl -f -s -I "$LINUX_AMD64_URL" | grep -q "200 OK"; then
              echo "✓ Linux AMD64 download URL accessible"
            else
              echo "✗ Linux AMD64 download URL failed"
              exit 1
            fi
          fi
          
          # 测试 Linux ARM64
          if [[ "${{ github.event.inputs.build_linux_arm64 }}" == "true" ]]; then
            LINUX_ARM64_URL="https://loongcollector-community-edition.oss-cn-shanghai.aliyuncs.com/${VERSION}/loongcollector-${VERSION}.linux-arm64.tar.gz"
            echo "Testing Linux ARM64 download URL: $LINUX_ARM64_URL"
            if curl -f -s -I "$LINUX_ARM64_URL" | grep -q "200 OK"; then
              echo "✓ Linux ARM64 download URL accessible"
            else
              echo "✗ Linux ARM64 download URL failed"
              exit 1
            fi
          fi
          
          # 测试 Windows
          if [[ "${{ github.event.inputs.build_windows }}" == "true" ]]; then
            WINDOWS_URL="https://loongcollector-community-edition.oss-cn-shanghai.aliyuncs.com/${VERSION}/loongcollector-${VERSION}.windows-amd64.zip"
            echo "Testing Windows download URL: $WINDOWS_URL"
            if curl -f -s -I "$WINDOWS_URL" | grep -q "200 OK"; then
              echo "✓ Windows download URL accessible"
            else
              echo "✗ Windows download URL failed"
              exit 1
            fi
          fi
          
          echo "All tests passed!" 